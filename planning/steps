Step 1).
		Append padding bits till len % 512 = 448
	______________________
   |    2^64    | padding | 
   |____________|_________|

   sizeof(msg) + padding = multiple of 512 - 64

Step 2).
		Append length (64) bits
    ________________________________
   |    2^64    | padding | length  |
   |____________|_________|_64bits__|

   	length = 64 bits representation of size of original message in bits
	sizeof(msg) + padding + length = multiple of 512

Step 3).
		Initialize message digest (MD) buffers

	MD5 is 128 bits so we need 4 buffers of 32 bits to create the final result

	A = 01234567
	B = 89abcdef
	C = fedcba98
	C = 76543210

Step 4).
		Process each 512 bit msg block
	Process message in 16 word blocks (512 bit)
	 ____________________
	| 1024 bit msg block |
	|____________________|
			/	\
		   /	 \
		  /		  \
		 /		   \
	   _/_		   _\_
	  |512|		  |512|	<---- This will be the msg digest

	  64 steps

Step 5).
		Output (Message Digest in Buffers)
	


	Functions		16 Constants Used per round			
		F						16
		G						16
		H						16
		I						16



Logical Functions

	F(B, C, D) = (X & Y) | ((~X) & Y)
	G(B, C, D) = (X & Y) | (Y & (~X))
	H(B, C, D) = X ^ Y ^ Z
	I(B, C, D) = Y ^ (X | (~Z))


					IMPORTANT REMINDER

		No need to account for a \0 in a string
	In a file, read every byte so a \0 will be accounted for



